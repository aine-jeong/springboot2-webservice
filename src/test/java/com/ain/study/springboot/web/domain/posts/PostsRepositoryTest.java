package com.ain.study.springboot.web.domain.posts;

import com.ain.study.springboot.domain.posts.Posts;
import com.ain.study.springboot.domain.posts.PostsRepository;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
public class PostsRepositoryTest {

    @Autowired
    PostsRepository postsRepository;

    @After
    public void cleanup() {
        postsRepository.deleteAll();
    }
    /*
    @After
        - Junit에서 단위 테스트가 끝날 때 마다 수행되는 메소드를 지정
        - 보통 배포 전 전체테스트를 수행할 때 테스트간 데이터 침범을 막기 위해 사용한다.
        - 여러 테스트가 동시에 수행되면 테스트용 데이터베이스인 H2에 데이터가 그대로 남아 있어 다음 테스트 실행시 테스트가 실패할 수 있다.

    Hibernate: drop table posts if exists
    Hibernate: create table posts (id bigint generated by default as identity, author varchar(255),
                content TEXT not null, title varchar(500) not null, primary key (id))
     */

    @Test
    public void 게시글저장_불러오기() {
        //given
        String title = "테스트게시글";
        String content = "테스트 본문";

        postsRepository.save(Posts.builder()
                .title(title)
                .content(content)
                .author("ain@.")
                .build());
        /*
        테이블 posts에 insert/update 쿼리 실행, id값이 있다면 update가 없다면 insert가 실행된다.
        Hibernate: insert into posts (id, author, content, title) values (null, ?, ?, ?)
         */

        //when
        List<Posts> postsList = postsRepository.findAll();
        /*
        테이블 Posts에 있는 모든 데이터 조회
        Hibernate: select posts0_.id as id1_0_, posts0_.author as author2_0_, posts0_.content as content3_0_, posts0_.title as title4_0_ from posts posts0_
        Hibernate: select posts0_.id as id1_0_, posts0_.author as author2_0_, posts0_.content as content3_0_, posts0_.title as title4_0_ from posts posts0_
        Hibernate: delete from posts where id=?
         */

        //then
        Posts posts = postsList.get(0);
        assertThat(posts.getTitle()).isEqualTo(title);
        assertThat(posts.getContent()).isEqualTo(content);

    }

    @Test
    public void BaseTimeEntity_등록() {
        //given
        LocalDateTime now = LocalDateTime.of(2024, 6, 24, 0, 0, 0);
        postsRepository.save(Posts.builder()
                .title("title")
                .content("content")
                .author("author").build());

        //when
        List<Posts> postsList = postsRepository.findAll();

        //then
        Posts posts = postsList.get(0);

        System.out.println(">>>>>> createDate="+posts.getCreatedDate()+", modifiedDate="+posts.getModifiedDate());

        assertThat(posts.getCreatedDate()).isEqualTo(now);
        assertThat(posts.getModifiedDate()).isEqualTo(now);

    }
}
